# This compose file loads variables from a .env file if present.
# See .env.example for documented defaults. Copy it to .env and fill in secrets.
services:
    discord-cmp-bot:
        build: .
        container_name: discord-cmp-bot
        restart: unless-stopped
        environment:
            # Placeholders â€“ set your actual Discord bot token & config overrides via env or secrets
            # DISCORD_TOKEN: "your-token"
            NODE_ENV: production
            # Neo4j connection (provided by the neo4j service below). Override via .env when needed.
            NEO4J_URI: bolt://neo4j:7687
            NEO4J_USER: neo4j
            NEO4J_PASSWORD: '${NEO4J_PASSWORD:-neo4j}'
            # MinIO connection
            MINIO_ENDPOINT: minio
            MINIO_PORT: '9000'
            MINIO_USE_SSL: 'false'
            MINIO_ROOT_USER: '${MINIO_ROOT_USER:-minioadmin}'
            MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD:-minioadmin}'
        depends_on:
            neo4j:
                condition: service_healthy
        networks:
            - default

    neo4j:
        image: neo4j:5.22-community
        container_name: neo4j
        restart: unless-stopped
        environment:
            # Use .env to set NEO4J_PASSWORD for production. Default is "neo4j" for local dev only.
            NEO4J_AUTH: 'neo4j/${NEO4J_PASSWORD:-neo4j}'
            NEO4J_dbms_memory_heap_initial__size: 512m
            NEO4J_dbms_memory_heap_max__size: 1024m
            # Listen on all interfaces inside container; do not set advertised addresses to 0.0.0.0
            NEO4J_server_default__listen__address: 0.0.0.0
        ports:
            - '7474:7474' # HTTP UI
            - '7687:7687' # Bolt protocol
        volumes:
            - neo4j_data:/data
            - neo4j_logs:/logs
        healthcheck:
            test:
                [
                    'CMD-SHELL',
                    'cypher-shell -a bolt://localhost:7687 -u neo4j -p "${NEO4J_PASSWORD:-neo4j}" ''RETURN 1'' || exit 1',
                ]
            interval: 10s
            timeout: 10s
            retries: 10

    minio:
        image: minio/minio:latest
        container_name: minio
        restart: unless-stopped
        ports:
            - '9000:9000'
        environment:
            MINIO_ROOT_USER: '${MINIO_ROOT_USER:-minioadmin}'
            MINIO_ROOT_PASSWORD: '${MINIO_ROOT_PASSWORD:-minioadmin}'
        volumes:
            - minio_data:/data
        command: server /data
        depends_on:
            neo4j:
                condition: service_healthy
        networks:
            - default

networks:
    default:
        driver: bridge

volumes:
    neo4j_data:
    neo4j_logs:
    minio_data:
